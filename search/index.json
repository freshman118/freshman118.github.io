[{"content":"\n准备工作 1 2 3 4 5 6 7 8 9 # 自动创建 package.json 文件 npm init -y # 安装Three.js 3D 图形库，安装现代前端构建工具Vite（用于开发/打包） npm install three vite # 启动 Vite 开发服务器（推荐）（正式项目开发） npm run dev # 启动 Vite 开发服务器（快速测试或临时使用） npx vite npm init -y 说明：\n自动创建 package.json 文件\n-y 参数表示接受所有默认选项\n生成包含项目基本信息、依赖和脚本的基础配置文件\nnpm install three vite 说明：\nthree - 安装 Three.js 3D 图形库（当前项目核心依赖）\nvite - 安装现代前端构建工具（用于开发/打包）\n安装后会生成 node_modules 目录和 package-lock.json\nVS Code颜色高亮插件：Color Highlight\n项目结构 代码 package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \u0026#34;name\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;main.js\u0026#34;, \u0026#34;devDependencies\u0026#34;: {}, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;^0.148.0\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^6.2.0\u0026#34; } } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;太空飞船小游戏\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;score\u0026#34;\u0026gt;0\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;gameOver\u0026#34;\u0026gt;游戏结束\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;./main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 body { margin: 0; /* background-color: black; */ overflow: hidden; } #gameOver { position: absolute; /* 以自身宽度和高度向左、上移动一定距离，使其居中 */ transform: translate(-50%, -50%); left: 50%; top: 50%; color: red; display: none; font-size: 48px; } #score { position: absolute; transform: translate(-50%,0); left: 50%; color: white; display: block; font-size: 50px; margin: 0 auto; } main.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 // ============== 全局声明区 ============== import * as THREE from \u0026#39;three\u0026#39;; // 游戏状态相关变量 let scene, camera, renderer, ship, stone; let stones = []; let moveLeft = false, moveRight = false; let gameActive = true; let score = 0; let lastScoreUpdate = Date.now(); // ============== 核心逻辑模块 ============== // 初始化游戏基础设置 function init(){ // 场景初始化三要素 scene = new THREE.Scene(); camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000); renderer = new THREE.WebGLRenderer(); // 渲染基础配置 scene.background = new THREE.Color(0); renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(renderer.domElement); camera.position.z = 10; // 光照系统初始化 const ambientLight = new THREE.AmbientLight(0x404040); scene.add(ambientLight); // 游戏实体初始化 ship = new Ship(scene); stone = new Stone(scene); // 事件系统启动 setupEventListeners(); // 启动游戏主循环 gameLoop(); } // 主游戏循环（每帧执行） function gameLoop(){ if(!gameActive) return; requestAnimationFrame(gameLoop); // === 分数系统 === const now = Date.now(); if (now - lastScoreUpdate \u0026gt;= 1000) { score++; document.getElementById(\u0026#39;score\u0026#39;).textContent = score; lastScoreUpdate = now; } // === 玩家控制 === if(moveLeft) ship.move(\u0026#39;left\u0026#39;); if(moveRight) ship.move(\u0026#39;right\u0026#39;); // === 陨石管理系统 === // 生成逻辑（30%概率/帧） if(Math.random() \u0026lt; 0.3) { stones.push(new Stone(scene)); } // 更新循环 stones.forEach((stone, index) =\u0026gt; { // 运动逻辑 stone.move(); // 碰撞检测 if(checkCollision(ship.object, stone.object)) { endGame(); } // 对象回收 if(stone.isOutOfScreen()) { scene.remove(stone.object); stones.splice(index, 1); } }); // 场景渲染 renderer.render(scene, camera); } // ============== 输入控制模块 ============== function setupEventListeners() { // 键盘事件监听 document.addEventListener(\u0026#39;keydown\u0026#39;, (e) =\u0026gt; { if(e.key === \u0026#39;ArrowLeft\u0026#39;) moveLeft = true; if(e.key === \u0026#39;ArrowRight\u0026#39;) moveRight = true; }); document.addEventListener(\u0026#39;keyup\u0026#39;, (e) =\u0026gt; { if(e.key === \u0026#39;ArrowLeft\u0026#39;) moveLeft = false; if(e.key === \u0026#39;ArrowRight\u0026#39;) moveRight = false; }); // 窗口自适应 window.addEventListener(\u0026#39;resize\u0026#39;, () =\u0026gt; { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); }); } // ============== 游戏逻辑模块 ============== // 简易距离碰撞检测 function checkCollision(objA, objB) { return objA.position.distanceTo(objB.position) \u0026lt; 1.2; } // 游戏结束处理 function endGame() { gameActive = false; document.getElementById(\u0026#39;gameOver\u0026#39;).style.display = \u0026#39;block\u0026#39;; } // ============== 游戏对象类 ============== // 玩家飞船实体 class Ship { constructor(scene) { this.object = this.createShip(); this.speed = 0.2; scene.add(this.object); } // 飞船建模 createShip() { const geometry = new THREE.ConeGeometry(0.5, 1, 8); const material = new THREE.MeshBasicMaterial({color: 0x00ff00}); const ship = new THREE.Mesh(geometry, material); geometry.rotateX(Math.PI/2); ship.position.set(0, -4, 0); // 线框增强显示 const wireframe = new THREE.LineSegments( new THREE.EdgesGeometry(geometry), new THREE.LineBasicMaterial({ color: 0xffffff }) ); ship.add(wireframe); return ship; } // 移动控制逻辑 move(direction) { const maxX = 10; if(direction === \u0026#39;left\u0026#39; \u0026amp;\u0026amp; this.object.position.x \u0026gt; -maxX) { this.object.position.x -= this.speed; } if(direction === \u0026#39;right\u0026#39; \u0026amp;\u0026amp; this.object.position.x \u0026lt; maxX) { this.object.position.x += this.speed; } } } // 陨石实体 class Stone { constructor(scene) { this.object = this.create(); this.speed = 0.1; scene.add(this.object); this.resetPosition(); } // 陨石建模 create() { return new THREE.Mesh( new THREE.IcosahedronGeometry(0.5, 1), new THREE.MeshPhongMaterial({ color: 0xff4500, emissive: 0xff6347, emissiveIntensity: 0.6, specular: 0xffffff, shininess: 50, wireframe: true }) ); } // 位置初始化 resetPosition() { this.object.position.set( (Math.random() - 0.5) * 20, 9, 0 ); } // 下落逻辑 move() { this.object.position.y -= this.speed; } // 边界检测 isOutOfScreen() { return this.object.position.y \u0026lt; -5; } } // ============== 程序入口 ============== init(); ","date":"2025-04-26T00:00:00Z","permalink":"https://freshman118.github.io/p/3d%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%88%B9%E5%B0%8F%E6%B8%B8%E6%88%8F/","title":"3d太空飞船小游戏"},{"content":"\n准备 1 npm install vite three 代码 vite.config.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { defineConfig } from \u0026#39;vite\u0026#39;; export default defineConfig({ build: { emptyOutDir: false, }, server: { middleware: (req, res, next) =\u0026gt; { if (req.url === \u0026#39;/favicon.ico\u0026#39;) { res.statusCode = 404; res.end(); return; } next(); }, }, }); package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 { \u0026#34;name\u0026#34;: \u0026#34;three-vite\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;three\u0026#34;: \u0026#34;^0.174.0\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^6.2.1\u0026#34; } } index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;跳跃小游戏\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;score\u0026#34;\u0026gt;得分：0\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;game-over\u0026#34; class=\u0026#34;hidden\u0026#34;\u0026gt;游戏结束！得分：0\u0026lt;/div\u0026gt; \u0026lt;canvas id=\u0026#34;gameCanvas\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;./main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 body { margin: 0; overflow: hidden; background-color: white; } #canvas { display: block; } #score { position: absolute; left: 50%; top: 10px; transform: translateX(-50%); font-size: 30px; } #game-over { position: absolute; left: 50%; top: 50%; font-size: 30px; transform: translate(-50%, -50%); } .hidden { display: none; } main.jsimport * as THREE from \u0026#39;three\u0026#39;; import { distance } from \u0026#39;three/tsl\u0026#39;; let mario; // 玩家（马里奥） let gameOver = false; // 游戏是否结束 let velocity = 0; // 玩家垂直速度 let isJumping = false; // 跳跃状态 let jumpVelocity = 0.7; // 初始跳跃速度 let score = 0; // 分数 const gravity = 0.03; // 重力加速度 const moveSpeed = 0.1; // 移动速度 const coinScore = 1; // 吃掉金币增加分数 const coinRate = 0.005; // 金币生成概率 const enemyRate = 0.005; // 敌人生成概率 const enemySpeed = 0.05; // 敌人移动速度 const enemyScore = 1; // 敌人死亡增加分数 const enemies = []; // 敌人数组 const coins = []; // 金币数组 const keys = { left: false, right: false, jump: false }; // 按键状态 // ======================== // 场景初始化 // ======================== // 创建基础场景元素 const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100); const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: document.getElementById(\u0026#39;gameCanvas\u0026#39;) }); renderer.setSize(window.innerWidth, window.innerHeight); renderer.setClearColor(0xe0e0e0); // 设置背景色 camera.position.set(0, 5, 15); // 设置相机初始位置 // ======================== // 游戏对象创建 // ======================== // 创建地面对象 function createGround() { const groundGeometry = new THREE.PlaneGeometry(20, 1); const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x89ffff }); const ground = new THREE.Mesh(groundGeometry, groundMaterial); ground.rotation.x = -Math.PI / 2; ground.position.y = 0; scene.add(ground); } // 创建玩家角色 function createPlayer(){ const marioGeometry = new THREE.BoxGeometry(1, 2, 1); const marioMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 }); const mario = new THREE.Mesh(marioGeometry, marioMaterial); mario.position.set(-9, 1, 0); scene.add(mario); return mario; } // 金币生成逻辑 function spawnCoin() { const coinGeometry = new THREE.SphereGeometry(0.5, 16, 16); const coinMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 }); const coin = new THREE.Mesh(coinGeometry, coinMaterial); coin.position.set( Math.random() * 18 - 9, // X轴随机位置 6, // Y轴在地面以上 0 ); scene.add(coin); coins.push(coin); } // 敌人生成逻辑 function spawnEnemy() { const enemyGeometry = new THREE.BoxGeometry(1, 1, 1); const enemyMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 }); const enemy = new THREE.Mesh(enemyGeometry, enemyMaterial); enemy.position.set(10, 0.5, 0); // 从右侧生成 scene.add(enemy); enemies.push(enemy); } // 游戏结束处理 function endGame() { gameOver = true; document.getElementById(\u0026#39;game-over\u0026#39;).textContent = `游戏结束！得分：${score}`; document.getElementById(\u0026#39;game-over\u0026#39;).classList.remove(\u0026#39;hidden\u0026#39;); } // 碰撞检测系统 function checkCollisions() { enemies.forEach((enemy, index) =\u0026gt; { const dx = mario.position.x - enemy.position.x; const dy = mario.position.y - enemy.position.y; // 新增踩踏敌人判断（玩家在敌人正上方且在下落） if ( Math.abs(dx) \u0026lt; 0.8 \u0026amp;\u0026amp; // X轴接近 dy \u0026gt; 0.5 \u0026amp;\u0026amp; // 玩家Y坐标高于敌人 dy \u0026lt; 1.5 \u0026amp;\u0026amp; // 有效踩踏高度范围 velocity \u0026lt; 0 // 玩家处于下落状态 ) { scene.remove(enemy); enemies.splice(index, 1); updateScore(1); return; // 结束当前敌人的检测 } // 侧面碰撞（玩家y坐标在敌人范围内） if ( Math.abs(dx) \u0026lt; 0.8 \u0026amp;\u0026amp; Math.abs(dy) \u0026lt; 1.5 ) { endGame(); } }); } // 更新分数 function updateScore(value) { score += value; document.getElementById(\u0026#39;score\u0026#39;).textContent = `得分：${score}`; } // 窗口自适应逻辑 function handleResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } // ======================== // 监听事件 // ======================== function listenKey() { // 键盘按下事件 document.addEventListener(\u0026#39;keydown\u0026#39;, (e) =\u0026gt; { if (e.key === \u0026#39;ArrowLeft\u0026#39; || e.key === \u0026#39;a\u0026#39;) keys.left = true; if (e.key === \u0026#39;ArrowRight\u0026#39; || e.key === \u0026#39;d\u0026#39;) keys.right = true; if (e.key === \u0026#39; \u0026#39;) keys.jump = true; }); // 键盘释放事件 document.addEventListener(\u0026#39;keyup\u0026#39;, (e) =\u0026gt; { if (e.key === \u0026#39;ArrowLeft\u0026#39; || e.key === \u0026#39;a\u0026#39;) keys.left = false; if (e.key === \u0026#39;ArrowRight\u0026#39; || e.key === \u0026#39;d\u0026#39;) keys.right = false; if (e.key === \u0026#39; \u0026#39;) keys.jump = false; }); // 窗口自适应逻辑 window.addEventListener(\u0026#39;resize\u0026#39;, handleResize); } // ======================== // 游戏主循环 // ======================== // 初始化游戏 function init() { createGround(); mario = createPlayer(); listenKey(); } function animate() { requestAnimationFrame(animate); if (gameOver) return; // 玩家移动 if (keys.left \u0026amp;\u0026amp; mario.position.x \u0026gt; -9) { mario.position.x -= moveSpeed; } if (keys.right \u0026amp;\u0026amp; mario.position.x \u0026lt; 9) { mario.position.x += moveSpeed; } // 跳跃逻辑 if (keys.jump \u0026amp;\u0026amp; !isJumping \u0026amp;\u0026amp; mario.position.y \u0026lt;= 1) { velocity = jumpVelocity; isJumping = true; } // 重力 velocity -= gravity; mario.position.y += velocity; if (mario.position.y \u0026lt;= 1) { mario.position.y = 1; velocity = 0; isJumping = false; } // 生成金币 if (Math.random() \u0026lt; coinRate) { spawnCoin(); } // 更新金币位置 coins.forEach((coin, index) =\u0026gt; { let distance = mario.position.distanceTo(coin.position); if (distance \u0026lt; 1) { scene.remove(coin); coins.splice(index, 1); updateScore(coinScore);//加分 } }); // 生成敌人 if (Math.random() \u0026lt; enemyRate) { spawnEnemy(); } // 更新敌人位置 enemies.forEach((enemy, index) =\u0026gt; { enemy.position.x -= enemySpeed; // 向左移动 if (enemy.position.x \u0026lt; -10) { scene.remove(enemy); enemies.splice(index, 1); } }); // 碰撞检测 checkCollisions(); // 渲染 renderer.render(scene, camera); } // ======================== // 游戏启动 // ======================== init(); // 初始化游戏 animate(); // 启动游戏循环 ","date":"2025-04-26T00:00:00Z","permalink":"https://freshman118.github.io/p/3d%E8%B7%B3%E8%B7%83%E5%B0%8F%E6%B8%B8%E6%88%8F/","title":"3d跳跃小游戏"},{"content":"\n一、项目结构 1 2 3 4 5 webgl-cube/ ├── index.html ├── main.js ├── package.json └── vite.config.js 二、详细实现步骤 初始化项目 1 2 npm init -y npm install three vite --save-dev index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;旋转彩色立方体\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { margin: 0; overflow: hidden; } canvas { display: block; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;./main.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; main.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // 导入Three.js核心库 import * as THREE from \u0026#39;three\u0026#39;; // ---------- 场景初始化 ---------- // 创建三维场景容器 const scene = new THREE.Scene(); // ---------- 相机配置 ---------- // 创建透视相机（模拟人眼视角） const camera = new THREE.PerspectiveCamera( 75, // 视野角度（FOV） window.innerWidth / window.innerHeight, // 宽高比 0.1, // 近裁剪面（最近可见距离） 1000 // 远裁剪面（最远可见距离） ); // ---------- 渲染器配置 ---------- // 创建WebGL渲染器（启用抗锯齿） const renderer = new THREE.WebGLRenderer({ antialias: true, // 开启抗锯齿 alpha: true // 开启透明背景（可选） }); // 设置渲染器尺寸 renderer.setSize(window.innerWidth, window.innerHeight); // 设置像素比（适配高清屏） renderer.setPixelRatio(window.devicePixelRatio); // 将画布添加到页面 document.body.appendChild(renderer.domElement); // ---------- 立方体创建 ---------- // 创建立方体几何体（单位立方体） const geometry = new THREE.BoxGeometry(1, 1, 1); // 创建六面材质（颜色配置） const materials = [ new THREE.MeshBasicMaterial({ color: 0xff0000 }), // 右（+X） new THREE.MeshBasicMaterial({ color: 0x00ff00 }), // 左（-X） new THREE.MeshBasicMaterial({ color: 0x0000ff }), // 上（+Y） new THREE.MeshBasicMaterial({ color: 0xffff00 }), // 下（-Y） new THREE.MeshBasicMaterial({ color: 0xff00ff }), // 前（+Z） new THREE.MeshBasicMaterial({ color: 0x00ffff }) // 后（-Z） ]; // 组合几何体与材质生成网格对象 const cube = new THREE.Mesh(geometry, materials); scene.add(cube); // 设置相机初始位置（沿Z轴后移） camera.position.z = 5; // ---------- 动画循环 ---------- function animate() { requestAnimationFrame(animate); // 旋转动画（每秒约60帧） cube.rotation.x += 0.01; // X轴旋转 cube.rotation.y += 0.01; // Y轴旋转 // 渲染场景 renderer.render(scene, camera); } // 启动动画 animate(); // ---------- 窗口响应式处理 ---------- window.addEventListener(\u0026#39;resize\u0026#39;, () =\u0026gt; { // 更新相机参数 camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); // 更新渲染器尺寸 renderer.setSize(window.innerWidth, window.innerHeight); }); vite.config.js 1 2 3 4 5 6 7 8 9 import { defineConfig } from \u0026#39;vite\u0026#39; export default defineConfig({ base: \u0026#39;./\u0026#39;, server: { port: 3000, open: true } }) 三、核心概念解析 Three.js三大核心要素： Scene（场景）：所有3D对象的容器\nCamera（相机）：观察场景的视角\nRenderer（渲染器）：负责将3D场景渲染到2D画布\n坐标系系统： X轴：水平方向（右正左负）\nY轴：垂直方向（上正下负）\nZ轴：深度方向（屏幕外正，屏幕内负）\n材质类型： MeshBasicMaterial：基础材质（不受光照影响）\nMeshPhongMaterial：光泽材质（受光照影响）\nMeshStandardMaterial：PBR材质（物理渲染）\n四、运行项目 1 npx vite 五、常见问题解决 页面空白问题：\n检查控制台报错（F12打开开发者工具）\n确保相机位置正确（camera.position.z = 5）\n验证材质颜色值是否合法（0x开头十六进制）\n性能优化建议：\n1 2 3 // 在初始化渲染器时添加 renderer.shadowMap.enabled = true; // 启用阴影 renderer.outputEncoding = THREE.sRGBEncoding; // 颜色空间优化 进阶功能扩展：\n1 2 3 4 5 6 7 // 添加轨道控制器（需额外安装） import { OrbitControls } from \u0026#39;three/examples/jsm/controls/OrbitControls\u0026#39;; const controls = new OrbitControls(camera, renderer.domElement); // 添加环境光 const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); scene.add(ambientLight); ","date":"2025-04-26T00:00:00Z","permalink":"https://freshman118.github.io/p/3d%E6%97%8B%E8%BD%AC%E5%BD%A9%E8%89%B2%E5%B0%8F%E6%96%B9%E5%9D%97/","title":"3d旋转彩色小方块"},{"content":"1.Ollama 1.1 下载安装Ollama 下载\nhttps://ollama.com/download\nOllama 是一个开源工具链，旨在简化在本地环境（如个人电脑或服务器）中运行和管理大型语言模型（LLM）的过程。它允许用户快速部署、测试和调用开源的 LLM（如 Llama 系列、Falcon、Mistral 等），而无需复杂的配置。\n环境变量\n默认安装即可\n软链接到非C盘 位置\n类别 原目录 链接目录 模型 C:\\Users\\Jackson.ollama D:\\Program Files\\Ollama.ollama 日志 C:\\Users\\Jackson\\AppData\\Local\\Ollama D:\\Program Files\\Ollama\\Logs 主程序 C:\\Users\\Jackson\\AppData\\Local\\Programs\\Ollama D:\\Program Files\\Ollama\\Progam 软链接\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 建立软链接 mklink /D \u0026#34;C:\\Users\\Jackson\\.ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\.ollama\u0026#34; mklink /D \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\Logs\u0026#34; mklink /D \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Programs\\Ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\Progam\u0026#34; # 如果使用后再改则需要复制内容并删除源文件内容操作 robocopy \u0026#34;C:\\Users\\Jackson\\.ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\.ollama\u0026#34; /mir rmdir /s /q \u0026#34;C:\\Users\\Jackson\\.ollama\u0026#34; robocopy \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\Logs\u0026#34; /mir rmdir /s /q \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Ollama\u0026#34; robocopy \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Programs\\Ollama\u0026#34; \u0026#34;D:\\Program Files\\Ollama\\Progam\u0026#34; /mir rmdir /s /q \u0026#34;C:\\Users\\Jackson\\AppData\\Local\\Programs\\Ollama\u0026#34; 1.2 下载安装DeepSeek 无独立显卡：1.5b\n4G、8G：7B、8B\n1 2 3 4 5 6 7 # 查看显卡信息 dxdiag # 部署deepseek ollama run deepseek-r1:1.5b ollama run deepseek-r1:7b ollama run deepseek-r1:8b DeepSeek-R1 参数版本与显卡适配表 模型参数 FP16显存需求 最低显卡（4-bit量化） 推荐显卡（原生/优化） 关键说明 1.5B 3GB GTX 1060（6GB） RTX 3060（12GB） 原生运行，无需量化 7B 14GB RTX 3060（12GB, 4-bit） RTX 4070（12GB, 4-bit） 4-bit量化后显存占用约4.5GB 8B 16GB RTX 3060 Ti（8GB, 4-bit） RTX 4080（16GB, FP16） 原生需16GB，4-bit量化约5GB 14B 28GB RTX 4070 Ti（12GB, 4-bit） RTX 4090（24GB, 4-bit） 4-bit量化后显存约7GB 32B 64GB RTX 4090（24GB, 4-bit） 双RTX 4090（48GB, NVLink） 需多卡并行或8-bit量化（显存32GB） 70B 140GB 双A100 80GB（NVLink） H100 80GB ×2 仅限专业卡集群 671B 1.34TB 8×H100 80GB（分布式） DGX GH200（超级计算节点） 需超算级硬件支持 2.Cherry Studio Chatbox AI\n2.1 下载安装Cherry Studio https://cherry-ai.com/download\nCherry Studio 是一个新兴的 AI 工具平台，旨在为用户提供简单易用的界面来创建和管理基于大语言模型（LLM）的应用程序。它专注于简化 AI 模型的部署、交互和优化流程，适合开发者、内容创作者以及企业用户快速构建定制化的 AI 解决方案\n默认安装即可\n2.2 配置Cherry Studio 设置-Ollama-开启-管理-添加\n2.3 Cherry Studio VS Chatbox AI 维度 Cherry Studio Chatbox AI 定义 一款面向开发者的AI编程辅助工具，强调代码生成、调试和优化。 一款通用AI聊天助手，支持多种模型（如GPT、Claude等），侧重对话交互和内容创作。 核心功能 - 代码自动补全 - 错误检测与修复 - 项目级代码分析 - 集成开发环境（IDE）插件 - 多模型切换（GPT-4、Claude等） - 对话历史管理 - 文件上传解析 - 自定义提示词模板 优点 1. 深度代码理解：适合复杂项目开发。 2. 精准调试建议：减少人工排查时间。 3. IDE集成：无缝对接VS Code等工具。 1. 多模型支持：灵活选择AI模型。 2. 用户友好：界面简洁，适合非技术用户。 3. 跨平台：支持桌面端和移动端。 缺点 1. 学习曲线较陡（需编程基础）。 2. 功能局限于开发场景，通用性较弱。 1. 代码生成能力较弱（相比专业工具）。 2. 高级功能需付费（如GPT-4高频使用）。 侧重点 开发者效率工具： - 优化编码流程 - 提升代码质量 通用AI助手： - 日常问答 - 内容创作 - 知识检索 适用人群 程序员、软件工程师、技术团队。 普通用户、创作者、非技术背景的AI爱好者。 定价 通常按团队/企业订阅（提供免费试用）。 免费基础版 + 付费高级模型访问权限。 典型场景 - 自动生成API代码 - 修复复杂Bug - 撰写邮件/文案 - 学习新知识 - 头脑风暴 补充说明：\nCherry Studio 更适合技术场景，而 Chatbox AI 更偏向日常使用。 如果涉及代码开发，Cherry Studio的精准度更高；若需多模型切换或创意内容，Chatbox AI更灵活。 两者均支持本地化部署（具体取决于版本），但Chatbox AI对个人用户更友好。 如果需要更具体的功能对比（如支持的编程语言、模型版本等），可以进一步补充！\n3.测试 问题1 问：有若干只鸡兔同在一个笼子里，从上面数，有35个头，从下面数，有94只脚。问笼中各有多少只鸡和兔？\n答：兔子有12只，鸡有23只\n问题2 问：一个挂钟敲六下要30秒，敲12下要几秒?\n答：66秒\nReference 本地部署DeepSeek ","date":"2025-04-26T00:00:00Z","permalink":"https://freshman118.github.io/p/%E8%B6%85%E7%AE%80%E5%8D%95%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2deepseek/","title":"超简单本地部署DeepSeek"},{"content":"Hugo+Stack+GitHub\nGitHub GitHub\nhttps://github.com/\n下载安装git\nhttps://git-scm.com/downloads\nEdge插件authenticator 2fa client\nSettings-\u0026gt;Password and authentication-\u0026gt;Authenticator app-\u0026gt;Edit\n国内访问设置\n1 2 3 4 5 6 7 8 9 10 # 打开 Hosts 文件（Windows 路径：C:\\Windows\\System32\\drivers\\etc\\hosts） notepad C:\\Windows\\System32\\drivers\\etc\\hosts # 添加以下内容 140.82.114.3 github.com 140.82.114.4 gist.github.com 151.101.1.194 github.global.SSL.fastly.net # 保存文件后，刷新 DNS 缓存 ipconfig /flushdns 其他方法：使用加速器可以有效提高访问速度。推荐使用 Watt Toolkit 或 网易 UU 加速器\nHugo Hugo v0.131.0\nhttps://github.com/gohugoio/hugo\n1 2 3 4 5 6 7 # 创建网站项目 hugo new site teacher_blog # 启动服务 hugo server -D # 创建文章 hugo new content post/about-me/index.md hugo new content post/about-me/index.zh-cn.md Stack Stack v3.26.0\nhttps://github.com/CaiJimmy/hugo-theme-stack?tab=readme-ov-file\nEmoji\nhttps://www.emojiall.com/zh-hans/all-emojis\nutterances https://utteranc.es/\nhttps://www.jianshu.com/p/d94c036f1df4\nicons\nhttps://tabler.io/icons\nhttps://www.iconfont.cn/\nbaseurl: freshman118.github.io languageCode: en-us theme: hugo-theme-stack paginate: 5 title: 90后小陈老师 copyright: 90后小陈老师 # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: zh-cn # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: false languages: zh-cn: languageName: 中文 title: 90后小陈老师 weight: 2 params: description: 演示说明 services: # Change it to your Disqus shortname before using disqus: shortname: \u0026#34;hugo-theme-stack\u0026#34; # GA Tracking ID googleAnalytics: id: permalinks: post: /p/:slug/ page: /:slug/ params: mainSections: - post featuredImageField: image rssFullContent: true favicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) footer: since: 2025 customText: dateFormat: published: 2006-02-02 lastUpdated: 2006-02-02T13:18:50 sidebar: emoji: 😁 subtitle: 分享技术，享受生活 avatar: enabled: true local: true src: img/avatar.jpg article: math: false toc: true readingTime: false comments: enabled: true provider: disqus disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: issueTerm: pathname label: beaudar: repo: issueTerm: pathname label: theme: remark42: host: site: locale: vssue: platform: owner: repo: clientId: clientSecret: autoCreateIssue: false # Waline client configuration see: https://waline.js.org/en/reference/component.html waline: serverURL: lang: pageview: emoji: - https://unpkg.com/@waline/emojis@1.0.1/weibo requiredMeta: - name - email - url locale: admin: Admin placeholder: twikoo: envId: region: path: lang: # See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options cactus: defaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34; serverName: \u0026#34;cactus.chat\u0026#34; siteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site) giscus: repo: repoID: category: categoryID: mapping: lightTheme: darkTheme: reactionsEnabled: 1 emitMetadata: 0 gitalk: owner: admin: repo: clientID: clientSecret: cusdis: host: id: widgets: homepage: - type: search - type: archives # 显示归档年份数量 params: limit: 4 - type: categories params: limit: 10 # - type: tag-cloud # params: # limit: 10 page: - type: toc opengraph: twitter: # Your Twitter username site: # Available values: summary, summary_large_image card: summary_large_image defaultImage: opengraph: enabled: false local: false src: colorScheme: # Display toggle toggle: true # Available values: auto, light, dark default: auto imageProcessing: cover: enabled: true content: enabled: true ### Custom menu ### See https://stack.jimmycai.com/config/menu ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] social: - identifier: github name: GitHub url: https://github.com/freshman118 params: icon: brand-github - identifier: bilibili name: Bilibili url: https://space.bilibili.com/3493114532596161 params: icon: brand-bilibili related: includeNewer: true threshold: 60 toLower: false indices: - name: tags weight: 100 - name: categories weight: 200 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true tableOfContents: endLevel: 4 ordered: true startLevel: 2 highlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: true lineNumbersInTable: true tabWidth: 4 上线 创建GitHub仓库\nfreshman118.github.io\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 hugo -D cd public git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/freshman118/freshman118.github.io.git git push -u origin main git push -f origin main # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy 1 2 3 4 5 hugo -D cd public git add . git commit -m \u0026#34;3 commit\u0026#34; git push -u origin main ","date":"2025-04-26T00:00:00Z","permalink":"https://freshman118.github.io/p/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"搭建一个永久免费的博客"}]